#! /usr/bin/env bash

# arrow='->'
ARROW='\uf553'
THIS='\uf111'

function get_prs() {
    gh pr list \
        --json headRefName,url,isDraft,state \
        --template='{{range .}}{{.headRefName}} {{.url}} {{.isDraft}} {{.state}}{{"\n"}}{{end}}' \
        --state all \
        --limit 300 \
        --author @me
}

prs=$(get_prs)

function get_pr() {
    local branch="$1"

    local prinfo="$(grep "^$branch" <<< "$prs")"

    if [[ "$prinfo" == "" ]]; then
        return
    fi

    local url="$(cut -f2 -d' ' <<< "$prinfo")"
    local isdraft="$(cut -f3 -d' ' <<< "$prinfo")"
    local state="$(cut -f4 -d' ' <<< "$prinfo")"

    local draft=""
    [[ $isdraft == true ]] && draft="[DRAFT]"

    local state_color=white
    if [[ $state == MERGED ]]; then
        state_color=green
    elif [[ $state == OPEN ]]; then
        state_color=blue
    elif [[ $state == CLOSED ]]; then
        state_color=red
    fi

    # Only list open PR's for master/main
    if [[ $branch == master ]] || [[ $branch == main ]]; then
        if [[ $state != OPEN ]]; then
            return
        fi
    fi

    echo "\n      %(color:$state_color)$state$draft: %(color:cyan)$url"
}

function process_branch() {
    # feat/foo
    local branch="$1"

    # origin/feat/foo
    local upstream="$(git branch --list "$branch" --format='%(upstream:short)')"

    # [ahead 1, behind 20]
    local upstream_track="$(git branch --list "$branch" --format='%(upstream:track)')"

    local prline="$(get_pr $branch)"
    local date="$(git log -1 --format=%cd --date=relative $branch)"

    local track_short="$(git branch --list "$branch" --format='%(upstream:trackshort)')"

    local track_color="cyan"
    if [[ $track_short == "" ]]; then
        track_color="red"
    elif [[ $track_short == "<>" ]]; then
        track_color="red"
    elif [[ $track_short == "<" ]]; then
        track_color="white"
    fi

    echo -e "$(git branch \
        --color=always \
        --list \
        --format="\
%(color: bold green)%(if)%(HEAD)%(then)$THIS %(else)  %(end)\
%(color:yellow)%(refname:short)%(color:reset) $ARROW \
%(color:blue)%(upstream:short) \
%(color:$track_color)$upstream_track \
%(color:magenta)($date)\
$prline" \
            "$branch")"

    # Show commits
    if [[ "$upstream" != "" ]] && [[ "$upstream_track" != "[gone]" ]]; then
        git --no-pager log --format="      %s" "$upstream..$branch"
    fi
}

git for-each-ref --shell --format="%(refname:short)" refs/heads |
    while read -r entry; do
        branch=$(echo "$entry" | xargs)  # Unquote
        process_branch $branch
    done
